//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/core/core-shared/src/main/java/im/diyalog/core/Messenger.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogCoreMessenger")
#ifdef RESTRICT_ImDiyalogCoreMessenger
#define INCLUDE_ALL_ImDiyalogCoreMessenger 0
#else
#define INCLUDE_ALL_ImDiyalogCoreMessenger 1
#endif
#undef RESTRICT_ImDiyalogCoreMessenger

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACMessenger_) && (INCLUDE_ALL_ImDiyalogCoreMessenger || defined(INCLUDE_ACMessenger))
#define ACMessenger_

@class ACAbsContent;
@class ACAppStateVM;
@class ACAuthRes;
@class ACAuthState;
@class ACCallVM;
@class ACConfiguration;
@class ACConversationVM;
@class ACDialogGroupsVM;
@class ACFastThumb;
@class ACFileReference;
@class ACFileVM;
@class ACGroupAvatarVM;
@class ACGroupVM;
@class ACI18nEngine;
@class ACJsonContent;
@class ACModules;
@class ACNetworkState;
@class ACOwnAvatarVM;
@class ACPeer;
@class ACPeerSearchType;
@class ACSex;
@class ACSticker;
@class ACStickersVM;
@class ACUploadFileVM;
@class ACUserVM;
@class ARApiRawValue;
@class ARMVVMCollection;
@class ARPromise;
@class ARValueModel;
@class IOSIntArray;
@class IOSLongArray;
@class ImDiyalogCoreModulesDomainsecurityDomainSecurity;
@class JavaLangDouble;
@class JavaLangLong;
@class JavaUtilArrayList;
@protocol ACCommand;
@protocol ACFileCallback;
@protocol ACFileEventCallback;
@protocol ACFileVMCallback;
@protocol ACModuleContext;
@protocol ACUploadFileCallback;
@protocol ACUploadFileVMCallback;
@protocol ARPreferencesStorage;
@protocol JavaUtilList;

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

/*!
 @brief Entry point to Diyalog Messaging
 Before using Messenger you need to create Configuration object by using ConfigurationBuilder.
 */
@interface ACMessenger : NSObject {
 @public
  ACModules *modules_;
}

#pragma mark Public

/*!
 @brief Construct messenger
 @param configuration configuration of messenger
 */
- (instancetype)initWithConfiguration:(ACConfiguration * __nonnull)configuration;

/*!
 @brief Add contact to contact's list
 @param uid user's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)addContactCommandWithUid:(jint)uid;

/*!
 @brief Adding reaction to a message
 @param peer destination peer
 @param rid  random id of message
 @param code reaction code
 @return Command for execution
 */
- (id<ACCommand>)addReactionWithPeer:(ACPeer *)peer
                             withRid:(jlong)rid
                            withCode:(NSString *)code;

/*!
 @brief Answer call by call id
 @param callId Call id
 */
- (void)answerCallWithCallId:(jlong)callId;

/*!
 @brief Archive chat
 @param peer destination peer
 @return Command for execution
 */
- (id<ACCommand>)archiveChatCommandWithPeer:(ACPeer *)peer;

/*!
 @brief Performing auto login
 */
- (void)autoLoginWithLong:(jlong)authID;

/*!
 @brief Bind File View Model
 @param fileReference reference to file
 @param isAutoStart   automatically start download
 @param callback      View Model file state callback
 @return File View Model
 */
- (ACFileVM * __nonnull)bindFileWithReference:(ACFileReference *)fileReference
                                    autoStart:(jboolean)isAutoStart
                                 withCallback:(id<ACFileVMCallback>)callback;

/*!
 @brief Raw Bind File
 @param fileReference reference to file
 @param isAutoStart   automatically start download
 @param callback      file state callback
 */
- (void)bindRawFileWithReference:(ACFileReference *)fileReference
                       autoStart:(jboolean)isAutoStart
                    withCallback:(id<ACFileCallback>)callback;

/*!
 @brief Raw Bind Upload File
 @param rid      randomId of uploading file
 @param callback file state callback
 */
- (void)bindRawUploadFileWithRid:(jlong)rid
                    withCallback:(id<ACUploadFileCallback>)callback;

/*!
 @brief Bind Uploading File View Model
 @param rid      randomId of uploading file
 @param callback View Model file state callback
 @return Upload File View Model
 */
- (ACUploadFileVM * __nonnull)bindUploadWithRid:(jlong)rid
                                   withCallback:(id<ACUploadFileVMCallback>)callback;

/*!
 @brief Cancel file download
 @param fileId file's id
 */
- (void)cancelDownloadingWithFileId:(jlong)fileId;

/*!
 @brief Change conversation tones enabled value
 @param val is conversation tones enabled
 */
- (void)changeConversationTonesEnabledWithValue:(jboolean)val;

/*!
 @brief Change group avatar
 @param gid        group's id
 @param descriptor descriptor of avatar file
 */
- (void)changeGroupAvatarWithGid:(jint)gid
                  withDescriptor:(NSString *)descriptor;

/*!
 @brief Change group notifications enabled
 @param val is group notifications enabled
 */
- (void)changeGroupNotificationsEnabled:(jboolean)val;

/*!
 @brief Change group notifications only for mentions enabled
 @param val is group notifications only for mentions
 */
- (void)changeGroupNotificationsOnlyMentionsEnabled:(jboolean)val;

/*!
 @brief Change in-app notifications enable value
 @param val is notifications enabled
 */
- (void)changeInAppNotificationsEnabledWithValue:(jboolean)val;

/*!
 @brief Change in-app notifications sound enabled value
 @param val is notifications sound enabled
 */
- (void)changeInAppNotificationSoundEnabledWithValue:(jboolean)val;

/*!
 @brief Change in-app notifications vibration enabled value
 @param val is notifications vibration enabled
 */
- (void)changeInAppNotificationVibrationEnabledWithValue:(jboolean)val;

/*!
 @brief Change current user's avatar
 @param descriptor descriptor of avatar file
 */
- (void)changeMyAvatarWithDescriptor:(NSString *)descriptor;

/*!
 @brief Change notifications enabled value
 @param val is notifications enabled
 */
- (void)changeNotificationsEnabledWithValue:(jboolean)val;

/*!
 @brief Change if notifications enabled for peer
 @param peer destination peer
 @param val  is notifications enabled
 */
- (void)changeNotificationsEnabledWithPeer:(ACPeer *)peer
                                 withValue:(jboolean)val;

/*!
 @brief Change sound that used for notifications
 @param sound notification sound name
 */
- (void)changeNotificationSoundWithSound:(NSString *)sound;

/*!
 @brief Change notification sounds enabled
 @param val is notification sounds enabled
 */
- (void)changeNotificationSoundEnabledWithValue:(jboolean)val;

/*!
 @brief Change notification vibration enabled
 @param val is notification vibration enabled
 */
- (void)changeNotificationVibrationEnabledWithValue:(jboolean)val;

/*!
 @brief Change if out of office enabled
 @param val is out of office enabled
 */
- (void)changeOutOfOfficeWithValue:(jboolean)val;

/*!
 @brief Change background
 @param uri background uri
 */
- (void)changeSelectedWallpaper:(NSString *)uri;

/*!
 @brief Change if send by enter enabled
 @param val is send by enter enabled
 */
- (void)changeSendByEnterWithValue:(jboolean)val;

/*!
 @brief Change displaying text in notifications enabled
 @param val is displaying text in notifications enabled
 */
- (void)changeShowNotificationTextEnabledWithValue:(jboolean)val;

/*!
 @brief Change text size
 @param val new chat text size
 */
- (void)changeTextSizeWithValue:(jint)val;

/*!
 @brief Checking incoming call from push notification
 @param callId  Call Id
 @param attempt Call Attempt
 */
- (void)checkCall:(jlong)callId
      withAttempt:(jint)attempt;

/*!
 @brief Clear chat
 @param peer destination peer
 @return Command for execution
 */
- (id<ACCommand>)clearChatCommandWithPeer:(ACPeer *)peer;

/*!
 @brief Complete superuser authorisation
 */
- (id<ACCommand> __nonnull)completeSuperUserAuth;

/*!
 @brief Command for completing web action
 @param actionHash web action name
 @param url        completion url
 @return Command for execution
 */
- (id<ACCommand>)completeWebActionWithHash:(NSString *)actionHash
                                   withUrl:(NSString *)url;

/*!
 @brief Create group
 @param title            group title
 @param avatarDescriptor descriptor of group avatar (can be null if not set)
 @param uids             member's ids
 @return Command for execution
 */
- (id<ACCommand> __nullable)createGroupCommandWithTitle:(NSString *)title
                                             withAvatar:(NSString *)avatarDescriptor
                                               withUids:(IOSIntArray *)uids;

/*!
 @brief Delete chat
 @param peer destination peer
 @return Command for execution
 */
- (id<ACCommand>)deleteChatCommandWithPeer:(ACPeer *)peer;

/*!
 @brief Delete messages
 @param peer destination peer
 @param rids rids of messages
 */
- (void)deleteMessagesWithPeer:(ACPeer *)peer
                      withRids:(IOSLongArray *)rids;

/*!
 @brief Calling to user
 @param uid user you want to call
 @return command to execute
 */
- (id<ACCommand>)doCallWithUid:(jint)uid;

/*!
 @brief Complete Authentication
 @param authRes authentication result for commiting
 @return promise of Boolean
 */
- (ARPromise * __nonnull)doCompleteAuth:(ACAuthRes *)authRes;

/*!
 @brief Starting new group call
 @param gid group you want to call
 @return command to execute
 */
- (id<ACCommand>)doCallWithGid:(jint)gid;

/*!
 @brief Sending activation code via voice
 @param transactionHash transaction hash
 @return promice of Boolean
 */
- (ARPromise * __nonnull)doSendCodeViaCall:(NSString *)transactionHash;

/*!
 @brief Signing Up
 @param name            name
 @param sex             sex of user
 @param transactionHash transaction hash
 @return promise of AuthRes
 */
- (ARPromise * __nonnull)doSignupWithName:(NSString *)name
                                  withSex:(ACSex *)sex
                          withTransaction:(NSString *)transactionHash;

/*!
 @brief Starting business phone auth
 @param phone phone for authentication
 @return promise of AuthStartRes
 */
- (ARPromise * __nonnull)doStartBusinessAuthWithPhone:(jlong)phone;

/*!
 @brief Starting email auth
 @param email email for authentication
 @return promise of AuthStartRes
 */
- (ARPromise * __nonnull)doStartAuthWithEmail:(NSString *)email;

/*!
 @brief Starting phone auth
 @param phone phone for authentication
 @return promise of AuthStartRes
 */
- (ARPromise * __nonnull)doStartAuthWithPhone:(jlong)phone;

/*!
 @brief Validating Confirmation Code
 @param code            code
 @param transactionHash transaction hash
 @return promise of AuthCodeRes
 */
- (ARPromise * __nonnull)doValidateCode:(NSString *)code
                        withTransaction:(NSString *)transactionHash;

/*!
 @brief Validating dlgToken
 @param dlgToken
 @param transactionHash
 @return promise of AuthCodeRes
 */
- (ARPromise * __nonnull)doValidateToken:(NSString *)dlgToken
                         withTransaction:(NSString *)transactionHash;

/*!
 @brief Edit group's about
 @param gid   group's id
 @param about new group about
 @return Command for execution
 */
- (id<ACCommand> __nonnull)editGroupAboutCommandWithGid:(jint)gid
                                              withAbout:(NSString *)about;

/*!
 @brief Edit group's theme
 @param gid   group's id
 @param theme new group theme
 @return Command for execution
 */
- (id<ACCommand> __nonnull)editGroupThemeCommandWithGid:(jint)gid
                                              withTheme:(NSString *)theme;

/*!
 @brief Edit group's title
 @param gid   group's id
 @param title new group title
 @return Command for execution
 */
- (id<ACCommand> __nullable)editGroupTitleCommandWithGid:(jint)gid
                                               withTitle:(NSString *)title;

/*!
 @brief Edit current user's about
 @param newAbout new user's about
 @return Command for execution
 */
- (id<ACCommand> __nullable)editMyAboutCommandWithNick:(NSString *)newAbout;

/*!
 @brief Edit current user's name
 @param newName new user's name
 @return Command for execution
 */
- (id<ACCommand> __nullable)editMyNameCommandWithName:(NSString *)newName;

/*!
 @brief Edit current user's nick
 @param newNick new user's nick
 @return Command for execution
 */
- (id<ACCommand> __nullable)editMyNickCommandWithNick:(NSString *)newNick;

/*!
 @brief Edit user's local name
 @param uid  user's id
 @param name new user's local name
 @return Command for execution
 */
- (id<ACCommand> __nullable)editNameCommandWithUid:(jint)uid
                                          withName:(NSString *)name;

/*!
 @brief Ending call by call id
 @param callId Call id
 */
- (void)endCallWithCallId:(jlong)callId;

/*!
 @brief Favouriting chat
 @param peer destination peer
 @return Command for execution
 */
- (id<ACCommand>)favouriteChatCommandWithPeer:(ACPeer *)peer;

/*!
 @brief Finding all doc messages
 @param peer peer for search
 @return found messages
 */
- (id<ACCommand>)findAllDocsWithPeer:(ACPeer *)peer;

/*!
 @brief Finding all messages with links
 @param peer peer for search
 @return found messages
 */
- (id<ACCommand>)findAllLinksWithPeer:(ACPeer *)peer;

/*!
 @brief Finding all messages with photos
 @param peer peer for search
 @return found messages
 */
- (id<ACCommand>)findAllPhotosWithPeer:(ACPeer *)peer;

/*!
 @brief Get downloaded file descriptor
 @param fileId file' id
 @return descriptor if file is downloaded
 */
- (NSString * __nullable)findDownloadedDescriptorWithFileId:(jlong)fileId;

/*!
 @brief Finding suitable mentions
 @param gid   gid of group
 @param query query for search
 @return matches
 */
- (id<JavaUtilList>)findMentionsWithGid:(jint)gid
                              withQuery:(NSString *)query;

/*!
 @brief Finding peers by type
 @param type type of peer
 @return found peers
 */
- (id<ACCommand>)findPeersWithType:(ACPeerSearchType *)type;

/*!
 @brief Finding text messages by query
 @param peer  peer for search
 @param query query for search
 @return found messages
 */
- (id<ACCommand>)findTextMessagesWithPeer:(ACPeer *)peer
                                withQuery:(NSString *)query;

/*!
 @brief Find Users
 @param query query for search
 @return Command for execution
 */
- (id<ACCommand> __nonnull)findUsersCommandWithQuery:(NSString *)query;

/*!
 @brief Force checking of connection
 */
- (void)forceNetworkCheck;

/*!
 @brief Send DocumentContent - used for forwarding
 @param peer    destination peer
 @param content content to forward
 */
- (void)forwardContentContentWithPeer:(ACPeer *)peer
                          withContent:(ACAbsContent *)content;

/*!
 @brief Get ViewModel of application state
 @return view model of application state
 */
- (ACAppStateVM * __nonnull)getAppState;

/*!
 @brief Get current Authentication email.
 Value is valid only for SIGN_UP or CODE_VALIDATION_EMAIL states.
 @return email
 */
- (NSString *)getAuthEmail __attribute__((deprecated));

/*!
 @brief Get current Authentication phone.
 Value is valid only for SIGN_UP or CODE_VALIDATION_PHONE states.
 @return phone number in international format
 */
- (jlong)getAuthPhone __attribute__((deprecated));

/*!
 @brief Get current Authentication state
 @return current Authentication state
 */
- (ACAuthState * __nonnull)getAuthState __attribute__((deprecated));

/*!
 @brief Getting Available Stickers VM
 @return Stickers VM
 */
- (ACStickersVM * __nonnull)getAvailableStickersVM;

/*!
 @brief Get Call View Model by call id
 @param callId Call id
 @return Call view model
 */
- (ACCallVM *)getCallWithCallId:(jlong)callId;

/*!
 @brief Getting Conversation VM
 @param peer peer
 @return Conversation VM
 */
- (ACConversationVM * __nonnull)getConversationVMWithACPeer:(ACPeer *)peer;

/*!
 @brief Get Dialog Groups
 @return dialog groups
 */
- (ACDialogGroupsVM * __nonnull)getDialogGroupsVM;

/*!
 @brief Get DomainSecurity ViewModel
 @return ValueModel of Boolean for typing state
 */
- (ARValueModel * __nonnull)getDomainSecurity;

/*!
 @brief Formatting texts for UI
 @return formatter engine
 */
- (ACI18nEngine * __nonnull)getFormatter;

/*!
 @brief Get Group Value Model by GID
 @param gid gid
 @return Group Value Model
 */
- (ACGroupVM * __nonnull)getGroupWithGid:(jint)gid;

/*!
 @brief Get Group avatar ViewModel
 Used for displaying group avatar change progress
 @param gid group's ID
 @return the GroupAvatarVM
 */
- (ACGroupAvatarVM * __nullable)getGroupAvatarVMWithGid:(jint)gid;

/*!
 @brief Get Group View Model Collection
 @return Group ViewModel Collection
 */
- (ARMVVMCollection * __nullable)getGroups;

/*!
 @brief Get group chat ViewModel
 @param gid chat's Group Id
 @return ValueModel of int[] for typing state
 */
- (ARValueModel * __nonnull)getGroupTypingWithGid:(jint)gid;

/*!
 @brief Sound that used for notifications
 @return notification sound name
 */
- (NSString * __nullable)getNotificationSound;

/*!
 @brief Get Own avatar ViewModel
 Used for displaying avatar change progress
 @return the OwnAvatarVM
 */
- (ACOwnAvatarVM * __nullable)getOwnAvatarVM;

/*!
 @brief Get preferences storage
 @return the Preferences
 */
- (id<ARPreferencesStorage> __nonnull)getPreferences;

/*!
 @brief Get privacy state
 @return privacy state
 */
- (NSString * __nonnull)getPrivacy;

/*!
 @brief Getting selected wallpaper uri. local:[file_name] for local files
 @return not null if custom background set
 */
- (NSString *)getSelectedWallpaper;

/*!
 @brief Get text size
 */
- (jint)getTextSize;

/*!
 @brief Get private chat ViewModel
 @param uid chat's User Id
 @return ValueModel of Boolean for typing state
 */
- (ARValueModel * __nonnull)getTypingWithUid:(jint)uid;

/*!
 @brief Get UsageEvent ViewModel
 */
- (ARValueModel * __nonnull)getUsageEvent;

/*!
 @brief Get User Value Model by UID
 @param uid uid
 @return User Value Model
 */
- (ACUserVM * __nonnull)getUserWithUid:(jint)uid;

/*!
 @brief Get User View Model Collection
 @return User ViewModel Collection
 */
- (ARMVVMCollection * __nullable)getUsers;

/*!
 @brief Adding member to group
 @param gid group's id
 @param uid user's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)inviteMemberCommandWithGid:(jint)gid
                                               withUid:(jint)uid;

/*!
 @brief Is in app conversation tones enabled
 @return is conversation tones enabled flag
 */
- (jboolean)isConversationTonesEnabled;

/*!
 @brief Is Group Notifications Enabled
 @return is group notifications enabled
 */
- (jboolean)isGroupNotificationsEnabled;

/*!
 @brief Is Group Notifications only for mentions enabled
 @return val is group notifications only for mentions
 */
- (jboolean)isGroupNotificationsOnlyMentionsEnabled;

/*!
 @brief Is in-app notifications enabled
 @return is notifications enabled
 */
- (jboolean)isInAppNotificationsEnabled;

/*!
 @brief Is in-app notifications sound enabled
 @return is notifications sound enabled
 */
- (jboolean)isInAppNotificationSoundEnabled;

/*!
 @brief Is in-app notification vibration enabled
 @return is notifications vibration enabled
 */
- (jboolean)isInAppNotificationVibrationEnabled;

/*!
 @brief Convenience method for checking if user logged in
 @return true if user is logged in
 */
- (jboolean)isLoggedIn;

/*!
 @brief Is notifications enabled setting
 @return is notifications enabled
 */
- (jboolean)isNotificationsEnabled;

/*!
 @brief Is notifications enabled for peer
 @param peer destination peer
 @return is notifications enabled
 */
- (jboolean)isNotificationsEnabledWithPeer:(ACPeer *)peer;

/*!
 @brief Is notifications sounds enabled
 @return is notification sounds enabled
 */
- (jboolean)isNotificationSoundEnabled;

/*!
 @brief Is notification vibration enabled
 @return is notification vibration enabled
 */
- (jboolean)isNotificationVibrationEnabled;

/*!
 @brief Is out of office enabled.
 Useful for android and web.
 @return is out of office enabled
 */
- (jboolean)isOutOfOfficeEnabled;

/*!
 @brief Is Hint about contact rename shown to user and automatically mark as shown if not.
 @return is hint already shown
 */
- (jboolean)isRenameHintShown;

/*!
 @brief Is send by enter enabled.
 Useful for android and web.
 @return is send by enter enabled
 */
- (jboolean)isSendByEnterEnabled;

/*!
 @brief Is displaying text in notifications enabled
 @return is displaying text in notifications enabled
 */
- (jboolean)isShowNotificationsText;

/*!
 @brief Join group using invite link
 @param url invite link
 @return Command for execution
 */
- (id<ACCommand> __nullable)joinGroupViaLinkCommandWithUrl:(NSString *)url;

/*!
 @brief Join public group
 @param gid        group's id
 @param accessHash group's accessHash
 @return Command for execution
 */
- (id<ACCommand> __nullable)joinPublicGroupCommandWithGig:(jint)gid
                                           withAccessHash:(jlong)accessHash;

/*!
 @brief Kick member from group
 @param gid group's id
 @param uid user's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)kickMemberCommandWithGid:(jint)gid
                                             withUid:(jint)uid;

/*!
 @brief Leave group
 @param gid group's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)leaveGroupCommandWithGid:(jint)gid;

/*!
 @brief Listing public groups
 @return Command for execution
 */
- (id<ACCommand> __nullable)listPublicGroups;

/*!
 @brief Load message draft
 @param peer destination peer
 @return null if no draft available
 */
- (NSString * __nullable)loadDraftWithPeer:(ACPeer *)peer;

/*!
 @brief Loading last read messages
 @param peer destination peer
 @return rid of last read message
 */
- (jlong)loadFirstUnread:(ACPeer *)peer __attribute__((deprecated));

/*!
 @brief Loading active sessions
 @return Command for execution
 */
- (id<ACCommand> __nonnull)loadSessionsCommand;

/*!
 @brief Make member admin of group
 @param gid group's id
 @param uid user's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)makeAdminCommandWithGid:(jint)gid
                                            withUid:(jint)uid;

/*!
 @brief Send message received by inactive account
 @param receiverId message received account uid
 @param senderId message is sent by
 @param date message received date as long
 */
- (void)markMessageReceivedByInActiveUserWithReceiverId:(jint)receiverId
                                           withSenderId:(jint)senderId
                                               withDate:(jlong)date;

/*!
 @brief Get authenticated User Id
 @return current User Id
 */
- (jint)myUid;

/*!
 @brief MUST be called on app became hidden
 */
- (void)onAppHidden;

/*!
 @brief MUST be called on app became visible
 */
- (void)onAppVisible;

/*!
 @brief MUST be called on conversation closed
 @param peer conversation's peer
 */
- (void)onConversationClosedWithPeer:(ACPeer * __nonnull)peer;

/*!
 @brief MUST be called on conversation open
 @param peer conversation's peer
 */
- (void)onConversationOpenWithPeer:(ACPeer * __nonnull)peer;

/*!
 @brief Can be called for forcing conversation loading in background
 @param peer conversation's peer
 */
- (void)onConversationPreLoadWithPeer:(ACPeer * __nonnull)peer;

/*!
 @brief MUST be called on dialogs closed
 */
- (void)onDialogsClosed;

/*!
 @brief MUST be called on dialogs open
 */
- (void)onDialogsOpen;

/*!
 @brief This method is called when messenger was logged in.
 Useful for subclasses
 */
- (void)onLoggedIn;

/*!
 @brief MUST be called when network status change detected
 @param state New network state
 */
- (void)onNetworkChanged:(ACNetworkState * __nonnull)state;

/*!
 @brief MUST be called when new diyalog sdk run from domain application.
 @param domainSecurity domain security data
 */
- (void)onNewDomainSecurtyWithDomainSecurity:(ImDiyalogCoreModulesDomainsecurityDomainSecurity * __nonnull)domainSecurity;

/*!
 @brief MUST be called when phone book change detected
 */
- (void)onPhoneBookChanged;

/*!
 @brief MUST be called on profile closed
 @param uid user's Id
 */
- (void)onProfileClosedWithUid:(jint)uid;

/*!
 @brief MUST be called on profile open
 @param uid user's Id
 */
- (void)onProfileOpenWithUid:(jint)uid;

/*!
 @brief MUST be called when external push received
 @param seq sequence number of update
 */
- (void)onPushReceivedWithSeq:(jint)seq;

/*!
 @brief MUST be called on typing in chat.
 Can be called with any frequency
 @param peer conversation's peer
 */
- (void)onTypingWithPeer:(ACPeer * __nonnull)peer;

/*!
 @brief Must be called when user is navigating Diyalog UI
 */
- (void)onUserPressedToDiyalog;

/*!
 @brief Fire event when user object became visible
 @param uid user's Id
 */
- (void)onUserVisibleWithUid:(jint)uid;

/*!
 @brief Pause upload
 @param rid file's random id
 */
- (void)pauseUploadWithRid:(jlong)rid;

/*!
 @brief Call this method when user is pobabbly want to end call.
 For example when power button
 was pressed on iOS device
 */
- (void)probablyEndCall;

/*!
 @brief Command for persistent raw api requests
 @param service service name
 @param method  method name
 @param params  request params
 */
- (void)rawPersistentRequestWithService:(NSString *)service
                             withMethod:(NSString *)method
                             WithParams:(ARApiRawValue *)params;

/*!
 @brief Command for raw api request
 @param service service name
 @param method  method name
 @param params  request params
 */
- (void)rawRequestWithService:(NSString *)service
                   withMethod:(NSString *)method
                   WithParams:(ARApiRawValue *)params;

/*!
 @brief Command for raw api request
 @param service service name
 @param method  method name
 @param params  request params
 @return Command for execution
 */
- (id<ACCommand>)rawRequestCommandWithService:(NSString *)service
                                   withMethod:(NSString *)method
                                   WithParams:(ARApiRawValue *)params;

/*!
 @brief Register actor push
 @param endpoint push endpoint
 */
- (void)registerActorPushWithEndpoint:(NSString *)endpoint;

/*!
 @brief Register apple push
 @param apnsId internal APNS cert key
 @param token  APNS token
 */
- (void)registerApplePushWithApnsId:(jint)apnsId
                          withToken:(NSString *)token;

/*!
 @brief Register apple push kit tokens
 @param apnsId internal APNS cert key
 @param token  APNS token
 */
- (void)registerApplePushKitWithApnsId:(jint)apnsId
                             withToken:(NSString *)token;

/*!
 @brief Register google push
 @param projectId GCM project id
 @param token     GCM token
 */
- (void)registerGooglePushWithProjectId:(jlong)projectId
                              withToken:(NSString *)token;

/*!
 @brief Remove user from contact's list
 @param uid user's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)removeContactCommandWithUid:(jint)uid;

/*!
 @brief Removing group avatar
 @param gid group's id
 */
- (void)removeGroupAvatarWithGid:(jint)gid;

/*!
 @brief Remove current user's avatar
 */
- (void)removeMyAvatar;

/*!
 @brief Removing reaction to a message
 @param peer destination peer
 @param rid  random id of message
 @param code reaction code
 @return Command for execution
 */
- (id<ACCommand>)removeReactionWithPeer:(ACPeer *)peer
                                withRid:(jlong)rid
                               withCode:(NSString *)code;

/*!
 @brief Request complete OAuth
 @param code code from oauth
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestCompleteOAuthCommandWithCode:(NSString *)code;

/*!
 @brief Request OAuth params
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestGetOAuthParamsCommand;

/*!
 @brief Request integration token for group
 @param gid group's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)requestIntegrationTokenCommandWithGid:(jint)gid;

/*!
 @brief Request invite link for group
 @param gid group's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)requestInviteLinkCommandWithGid:(jint)gid;

/*!
 @brief Request phone call activation
 @return command for execution
 */
- (id<ACCommand> __nonnull)requestPhoneCall;

/*!
 @brief Request user name anonymous auth
 @param userName userName to authenticate
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAnonymousAuthWithUserName:(NSString *)userName __attribute__((deprecated));

/*!
 @brief Request anonymous auth for faq
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAnonymousAuthForFaq;

/*!
 @brief Request domain customer token auth
 @param deviceId domain specific device id. this is for domain validation
 @param custId domain customer id
 @param custName customer name
 @param custPhone customer phone number
 @param custEmail customer email address
 @return Promise for execution
 */
- (ARPromise * __nonnull)requestStartDomainCustomerTokenAuthWithDeviceId:(NSString *)deviceId
                                                              withCustId:(NSString *)custId
                                                            withCustName:(NSString *)custName
                                                           withCustPhone:(JavaLangLong *)custPhone
                                                           withCustEmail:(NSString *)custEmail;

/*!
 @brief Request domain email auth
 @param email email to authenticate
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAuthDomainEmaikCommandWithEmail:(NSString *)email __attribute__((deprecated));

/*!
 @brief Request domain user token auth
 @param sessionId
 @param userId
 @param userName
 @param userPhone
 @param userEmail
 */
- (ARPromise * __nonnull)requestStartDomainUserTokenAuthWithSessionId:(NSString *)sessionId
                                                           withUserId:(NSString *)userId
                                                         withUserName:(NSString *)userName
                                                        withUserPhone:(JavaLangLong *)userPhone
                                                        withUserEmail:(NSString *)userEmail;

/*!
 @brief Request email auth
 @param email email to authenticate
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAuthCommandWithEmail:(NSString *)email __attribute__((deprecated));

/*!
 @brief Request phone auth
 @param phone phone to authenticate
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAuthCommandWithPhone:(jlong)phone __attribute__((deprecated));

/*!
 @brief Request user name auth
 @param userName userName to authenticate
 @return Command for execution
 */
- (id<ACCommand> __nonnull)requestStartAuthCommandWithUserName:(NSString *)userName;

/*!
 @brief Request file state
 @param fileId   file id
 @param callback file state callback
 */
- (void)requestStateWithFileId:(jlong)fileId
                  withCallback:(id<ACFileCallback>)callback;

/*!
 @brief Request upload file state
 @param rid      file's random id
 @param callback file state callback
 */
- (void)requestUploadStateWithRid:(jlong)rid
                     withCallback:(id<ACUploadFileCallback>)callback;

/*!
 @brief Resetting authentication process
 */
- (void)resetAuth __attribute__((deprecated));

/*!
 @brief Resetting current authentication process
 */
- (void)resetCurrentAuth;

/*!
 @brief Resume upload
 @param rid file's random id
 */
- (void)resumeUploadWithRid:(jlong)rid;

/*!
 @brief Revoke get integration token for group
 @param gid group's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)revokeIntegrationTokenCommandWithGid:(jint)gid;

/*!
 @brief Revoke invite link for group
 @param gid group's id
 @return Command for execution
 */
- (id<ACCommand> __nullable)requestRevokeLinkCommandWithGid:(jint)gid;

/*!
 @brief Save message draft
 @param peer  destination peer
 @param draft message draft
 */
- (void)saveDraftWithPeer:(ACPeer *)peer
                withDraft:(NSString *)draft;

/*!
 @brief Send Audio message
 @param peer       destination peer
 @param duration   audio duration
 @param descriptor File Descriptor
 */
- (void)sendAudioWithPeer:(ACPeer * __nonnull)peer
                 withName:(NSString * __nonnull)fileName
             withDuration:(jint)duration
           withDescriptor:(NSString * __nonnull)descriptor;

/*!
 @brief Send Markdown Message with mentions
 @param peer        destination peer
 @param name        contact name
 @param phones      contact phones
 @param emails      contact emails
 @param base64photo contact photo
 */
- (void)sendContactWithPeer:(ACPeer * __nonnull)peer
                   withName:(NSString * __nonnull)name
                 withPhones:(JavaUtilArrayList * __nonnull)phones
                 withEmails:(JavaUtilArrayList * __nonnull)emails
                  withPhoto:(NSString * __nullable)base64photo;

/*!
 @brief Send json message
 @param peer    destination peer
 @param content json content
 */
- (void)sendCustomJsonMessageWithPeer:(ACPeer * __nonnull)peer
                             withJson:(ACJsonContent * __nonnull)content;

/*!
 @brief Send document with preview
 @param peer       destination peer
 @param fileName   File name (without path)
 @param mimeType   mimetype of document
 @param descriptor File Descriptor
 @param fastThumb  FastThumb of preview
 */
- (void)sendDocumentWithPeer:(ACPeer *)peer
                    withName:(NSString *)fileName
                    withMime:(NSString *)mimeType
                   withThumb:(ACFastThumb *)fastThumb
              withDescriptor:(NSString *)descriptor;

/*!
 @brief Send document without preview
 @param peer       destination peer
 @param fileName   File name (without path)
 @param mimeType   mimetype of document
 @param descriptor File Descriptor
 */
- (void)sendDocumentWithPeer:(ACPeer *)peer
                    withName:(NSString *)fileName
                    withMime:(NSString *)mimeType
              withDescriptor:(NSString *)descriptor;

/*!
 @brief Send Location Message
 @param peer      destination peer
 @param longitude user location longitude
 @param latitude  user location latitude
 @param street    user location street
 @param place     user location place
 */
- (void)sendLocationWithPeer:(ACPeer * __nonnull)peer
               withLongitude:(JavaLangDouble * __nonnull)longitude
                withLatitude:(JavaLangDouble * __nonnull)latitude
                  withStreet:(NSString * __nullable)street
                   withPlace:(NSString * __nullable)place;

/*!
 @brief Send Text Message
 @param peer destination peer
 @param text message text
 */
- (void)sendMessageWithPeer:(ACPeer * __nonnull)peer
                   withText:(NSString * __nonnull)text;

/*!
 @brief Send Text Message with mentions
 @param peer     destination peer
 @param text     message text
 @param mentions user's mentions
 */
- (void)sendMessageWithPeer:(ACPeer * __nonnull)peer
                   withText:(NSString * __nonnull)text
               withMentions:(JavaUtilArrayList * __nullable)mentions;

/*!
 @brief Send Markdown Message
 @param peer         destination peer
 @param text         message text
 @param markDownText message markdown text
 */
- (void)sendMessageWithPeer:(ACPeer * __nonnull)peer
                   withText:(NSString * __nonnull)text
           withMarkdownText:(NSString * __nullable)markDownText;

/*!
 @brief Send Markdown Message with mentions
 @param peer         destination peer
 @param text         message text
 @param markDownText message markdown text
 @param mentions     user's mentions
 */
- (void)sendMessageWithPeer:(ACPeer * __nonnull)peer
                   withText:(NSString * __nonnull)text
           withMarkdownText:(NSString * __nullable)markDownText
               withMentions:(JavaUtilArrayList * __nullable)mentions;

/*!
 @brief Send Markdown Message with mentions
 @param peer         destination peer
 @param text         message text
 @param markDownText message markdown text
 @param mentions     user's mentions
 */
- (void)sendMessageWithPeer:(ACPeer * __nonnull)peer
                   withText:(NSString * __nonnull)text
           withMarkdownText:(NSString * __nullable)markDownText
               withMentions:(JavaUtilArrayList * __nullable)mentions
                 autoDetect:(jboolean)autoDetect;

/*!
 @brief Send Text Message
 @param peer destination peer
 @param text message text
 */
- (void)sendMessageWithMentionsDetect:(ACPeer * __nonnull)peer
                             withText:(NSString * __nonnull)text;

/*!
 @brief Send Text Message
 @param peer destination peer
 @param text message text
 */
- (void)sendMessageWithMentionsDetect:(ACPeer * __nonnull)peer
                             withText:(NSString * __nonnull)text
                     withMarkdownText:(NSString * __nonnull)markdownText;

/*!
 @brief Send Photo message
 @param peer       destination peer
 @param fileName   File name (without path)
 @param w          photo width
 @param h          photo height
 @param fastThumb  Fast thumb of photo
 @param descriptor File Descriptor
 */
- (void)sendPhotoWithPeer:(ACPeer * __nonnull)peer
                 withName:(NSString * __nonnull)fileName
                    withW:(jint)w
                    withH:(jint)h
                withThumb:(ACFastThumb * __nullable)fastThumb
           withDescriptor:(NSString * __nonnull)descriptor;

/*!
 @brief Send document without preview
 @param peer    destination peer
 @param sticker sticker to send
 */
- (void)sendStickerWithPeer:(ACPeer *)peer
                withSticker:(ACSticker *)sticker;

/*!
 @brief Send Video message
 @param peer       destination peer
 @param fileName   File name (without path)
 @param w          video width
 @param h          video height
 @param duration   video duration
 @param fastThumb  Fast thumb of video
 @param descriptor File Descriptor
 */
- (void)sendVideoWithPeer:(ACPeer *)peer
                 withName:(NSString *)fileName
                    withW:(jint)w
                    withH:(jint)h
             withDuration:(jint)duration
                withThumb:(ACFastThumb *)fastThumb
           withDescriptor:(NSString *)descriptor;

/*!
 @brief Change privacy
 @param privacy privacy state (none|contacts|always)
 */
- (void)setPrivacyWithPrivacy:(NSString *)privacy;

/*!
 @brief Perform signup
 @param name       Name of User
 @param sex        user sex
 @param avatarPath File descriptor of avatar (may be null if not set)
 @return Comand for execution
 */
- (id<ACCommand> __nonnull)signUpCommandWithName:(NSString *)name
                                         WithSex:(ACSex *)sex
                                      withAvatar:(NSString *)avatarPath;

/*!
 @brief Start file download
 @param reference file's reference
 */
- (void)startDownloadingWithReference:(ACFileReference *)reference;

/*!
 @brief Command for starting web action
 @param webAction web action name
 @return Command for execution
 */
- (id<ACCommand>)startWebAction:(NSString *)webAction;

/*!
 @brief Subscribing to download events
 @param callback subscribe callback
 */
- (void)subscribeToDownloads:(id<ACFileEventCallback>)callback;

/*!
 @brief Resetting current authentication process
 */
- (void)switchAccount;

/*!
 @brief Terminate all other sessions
 @return Command for execution
 */
- (id<ACCommand> __nonnull)terminateAllSessionsCommand;

/*!
 @brief Terminate active session
 @param id_ session id
 @return Command for execution
 */
- (id<ACCommand> __nonnull)terminateSessionCommandWithId:(jint)id_;

/*!
 @brief Toggle muting of call
 @param callId Call Id
 */
- (void)toggleCallMuteWithCallId:(jlong)callId;

/*!
 @brief Unbind Raw File
 @param fileId       file id
 @param isAutoCancel automatically cancel download
 @param callback     file state callback
 */
- (void)unbindRawFileWithFileId:(jlong)fileId
                     autoCancel:(jboolean)isAutoCancel
                   withCallback:(id<ACFileCallback>)callback;

/*!
 @brief Unbind Raw Upload File
 @param rid      randomId of uploading file
 @param callback file state callback
 */
- (void)unbindRawUploadFileWithRid:(jlong)rid
                      withCallback:(id<ACUploadFileCallback>)callback;

/*!
 @brief Unfavouriting chat
 @param peer destination peer
 @return Command for execution
 */
- (id<ACCommand>)unfavouriteChatCommandWithPeer:(ACPeer *)peer;

/*!
 @brief Unsubscribing from download events
 @param callback unsubscribe callback
 */
- (void)unsubscribeFromDownloads:(id<ACFileEventCallback>)callback;

- (void)updateJsonMessageContentLocalWithACPeer:(ACPeer *)peer
                                       withLong:(jlong)rid
                              withACJsonContent:(ACJsonContent *)json;

/*!
 @brief Update Message
 @param peer destination peer
 @param text message text
 @param rid  message rundom id
 */
- (id<ACCommand>)updateMessageWithPeer:(ACPeer * __nonnull)peer
                              withText:(NSString * __nonnull)text
                               withRid:(jlong)rid;

/*!
 @brief Sending activation code
 @param code activation code
 @return Command for execution
 */
- (id<ACCommand> __nonnull)validateCodeCommand:(NSString *)code;

/*!
 @brief Sending password
 @param password Account password
 @return Command for execution
 */
- (id<ACCommand> __nonnull)validatePasswordCommand:(NSString *)password;

#pragma mark Package-Private

/*!
 @brief Get modules of messenger for extensions
 @return Module Contexts
 */
- (id<ACModuleContext>)getModuleContext;

@end

J2OBJC_EMPTY_STATIC_INIT(ACMessenger)

J2OBJC_FIELD_SETTER(ACMessenger, modules_, ACModules *)

FOUNDATION_EXPORT void ACMessenger_initWithConfiguration_(ACMessenger *self, ACConfiguration *configuration);

FOUNDATION_EXPORT ACMessenger *new_ACMessenger_initWithConfiguration_(ACConfiguration *configuration) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACMessenger *create_ACMessenger_initWithConfiguration_(ACConfiguration *configuration);

J2OBJC_TYPE_LITERAL_HEADER(ACMessenger)

@compatibility_alias ImDiyalogCoreMessenger ACMessenger;

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogCoreMessenger")
