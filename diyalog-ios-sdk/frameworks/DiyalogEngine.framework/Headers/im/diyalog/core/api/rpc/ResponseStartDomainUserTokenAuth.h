//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/core/core-shared/src/main/java/im/diyalog/core/api/rpc/ResponseStartDomainUserTokenAuth.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth")
#ifdef RESTRICT_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth
#define INCLUDE_ALL_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth 0
#else
#define INCLUDE_ALL_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth 1
#endif
#undef RESTRICT_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARResponseStartDomainUserTokenAuth_) && (INCLUDE_ALL_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth || defined(INCLUDE_ARResponseStartDomainUserTokenAuth))
#define ARResponseStartDomainUserTokenAuth_

#define RESTRICT_ImDiyalogCoreNetworkParserResponse 1
#define INCLUDE_ACResponse 1
#include "../../../../../im/diyalog/core/network/parser/Response.h"

@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

@interface ARResponseStartDomainUserTokenAuth : ACResponse

+ (jint)HEADER;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString * __nonnull)transactionHash
                     withBoolean:(jboolean)isRegistered;

+ (ARResponseStartDomainUserTokenAuth *)fromBytesWithByteArray:(IOSByteArray *)data;

- (jint)getHeaderKey;

- (NSString * __nonnull)getTransactionHash;

- (jboolean)isRegistered;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ARResponseStartDomainUserTokenAuth)

inline jint ARResponseStartDomainUserTokenAuth_get_HEADER();
#define ARResponseStartDomainUserTokenAuth_HEADER 304
J2OBJC_STATIC_FIELD_CONSTANT(ARResponseStartDomainUserTokenAuth, HEADER, jint)

FOUNDATION_EXPORT ARResponseStartDomainUserTokenAuth *ARResponseStartDomainUserTokenAuth_fromBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void ARResponseStartDomainUserTokenAuth_initWithNSString_withBoolean_(ARResponseStartDomainUserTokenAuth *self, NSString *transactionHash, jboolean isRegistered);

FOUNDATION_EXPORT ARResponseStartDomainUserTokenAuth *new_ARResponseStartDomainUserTokenAuth_initWithNSString_withBoolean_(NSString *transactionHash, jboolean isRegistered) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARResponseStartDomainUserTokenAuth *create_ARResponseStartDomainUserTokenAuth_initWithNSString_withBoolean_(NSString *transactionHash, jboolean isRegistered);

FOUNDATION_EXPORT void ARResponseStartDomainUserTokenAuth_init(ARResponseStartDomainUserTokenAuth *self);

FOUNDATION_EXPORT ARResponseStartDomainUserTokenAuth *new_ARResponseStartDomainUserTokenAuth_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARResponseStartDomainUserTokenAuth *create_ARResponseStartDomainUserTokenAuth_init();

J2OBJC_TYPE_LITERAL_HEADER(ARResponseStartDomainUserTokenAuth)

@compatibility_alias ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth ARResponseStartDomainUserTokenAuth;

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogCoreApiRpcResponseStartDomainUserTokenAuth")
