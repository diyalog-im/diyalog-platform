//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/runtime/runtime-shared/src/main/java/im/diyalog/runtime/crypto/primitives/aes/AESFastEngine.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine")
#ifdef RESTRICT_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine
#define INCLUDE_ALL_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine 0
#else
#define INCLUDE_ALL_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine 1
#endif
#undef RESTRICT_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine_) && (INCLUDE_ALL_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine || defined(INCLUDE_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine))
#define ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine_

#define RESTRICT_ImDiyalogRuntimeCryptoBlockCipher 1
#define INCLUDE_ARBlockCipher 1
#include "../../../../../../im/diyalog/runtime/crypto/BlockCipher.h"

@class IOSByteArray;

/*!
 @brief an implementation of the AES (Rijndael), from FIPS-197.
 <p/>
 For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
 <p/>
 This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
 <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
 <p/>
 There are three levels of tradeoff of speed vs memory
 Because java has no preprocessor, they are written as three separate classes from which to choose
 <p/>
 The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
 and 4 for decryption.
 <p/>
 The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
 adding 12 rotate operations per round to compute the values contained in the other tables from
 the contents of the first
 <p/>
 The slowest version uses no static tables at all and computes the values in each round
 <p/>
 This file contains the fast version with 8Kbytes of static tables for round precomputation
 <p/>
 Ported by Steve Kite (steve@@actor.im)
 */
@interface ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine : NSObject < ARBlockCipher >

#pragma mark Public

- (instancetype)initWithByteArray:(IOSByteArray *)key;

- (void)decryptBlock:(IOSByteArray *)data
          withOffset:(jint)offset
              toDest:(IOSByteArray *)dest
          withOffset:(jint)destOffset;

- (void)encryptBlock:(IOSByteArray *)data
          withOffset:(jint)offset
              toDest:(IOSByteArray *)dest
          withOffset:(jint)destOffset;

- (jint)getBlockSize;

@end

J2OBJC_STATIC_INIT(ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine)

FOUNDATION_EXPORT void ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine_initWithByteArray_(ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine *self, IOSByteArray *key);

FOUNDATION_EXPORT ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine *new_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine_initWithByteArray_(IOSByteArray *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine *create_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine_initWithByteArray_(IOSByteArray *key);

J2OBJC_TYPE_LITERAL_HEADER(ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogRuntimeCryptoPrimitivesAesAESFastEngine")
