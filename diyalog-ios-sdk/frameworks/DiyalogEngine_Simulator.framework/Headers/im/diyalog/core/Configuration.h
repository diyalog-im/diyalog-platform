//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/core/core-shared/src/main/java/im/diyalog/core/Configuration.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogCoreConfiguration")
#ifdef RESTRICT_ImDiyalogCoreConfiguration
#define INCLUDE_ALL_ImDiyalogCoreConfiguration 0
#else
#define INCLUDE_ALL_ImDiyalogCoreConfiguration 1
#endif
#undef RESTRICT_ImDiyalogCoreConfiguration

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACConfiguration_) && (INCLUDE_ALL_ImDiyalogCoreConfiguration || defined(INCLUDE_ACConfiguration))
#define ACConfiguration_

@class ACApiConfiguration;
@class ACDeviceCategory;
@class ACPlatformType;
@class IOSObjectArray;
@protocol ACCallsProvider;
@protocol ACNotificationProvider;
@protocol ACPhoneBookProvider;

/*!
 @brief Configuration for Messenger
 */
@interface ACConfiguration : NSObject
@property (readonly, nonatomic, getter=getEndpoints) IOSObjectArray *endpoints;
@property (readonly, nonatomic, getter=getTrustedKeys) IOSObjectArray *trustedKeys;
@property (readonly, nonatomic, getter=getPhoneBookProvider) id<ACPhoneBookProvider> phoneBookProvider;
@property (readonly, nonatomic, getter=isVoiceCallsEnabled) jboolean voiceCallsEnabled;
@property (readonly, nonatomic, getter=isEnableContactsLogging) jboolean enableContactsLogging;
@property (readonly, nonatomic, getter=isEnableNetworkLogging) jboolean enableNetworkLogging;
@property (readonly, nonatomic, getter=isEnableFilesLogging) jboolean enableFilesLogging;
@property (readonly, nonatomic, getter=getNotificationProvider) id<ACNotificationProvider> notificationProvider;
@property (readonly, nonatomic, getter=getApiConfiguration) ACApiConfiguration *apiConfiguration;
@property (readonly, nonatomic, getter=getDeviceCategory) ACDeviceCategory *deviceCategory;
@property (readonly, nonatomic, getter=getPlatformType) ACPlatformType *platformType;
@property (readonly, copy, nonatomic, getter=getTimeZone) NSString *timeZone;
@property (readonly, nonatomic, getter=getPreferredLanguages) IOSObjectArray *preferredLanguages;
@property (readonly, nonatomic, getter=getMinDelay) jint minDelay;
@property (readonly, nonatomic, getter=getMaxDelay) jint maxDelay;
@property (readonly, nonatomic, getter=getMaxFailureCount) jint maxFailureCount;
@property (readonly, copy, nonatomic, getter=getCustomAppName) NSString *customAppName;
@property (readonly, nonatomic, getter=isEnablePhoneBookImport) jboolean enablePhoneBookImport;
@property (readonly, nonatomic, getter=getCallsProvider) id<ACCallsProvider> callsProvider;
@property (readonly, nonatomic, getter=isEnabledGroupedChatList) jboolean isEnabledGroupedChatList;

#pragma mark Public

/*!
 @brief Get API Configuration
 @return API Configuration
 */
- (ACApiConfiguration *)getApiConfiguration;

/*!
 @brief Getting Calls provider if set
 @return Calls provider
 */
- (id<ACCallsProvider>)getCallsProvider;

/*!
 @brief Get Custom Application name
 @return Application Name if set, otherwise is null
 */
- (NSString *)getCustomAppName;

/*!
 @brief Get Device Type
 @return Device Type
 */
- (ACDeviceCategory *)getDeviceCategory;

/*!
 @brief Get Endpoints
 @return Endpoints
 */
- (IOSObjectArray *)getEndpoints;

/*!
 @brief Get Application max connection exponential backoff delay
 @return max connection exponential backoff delay
 */
- (jint)getMaxDelay;

/*!
 @brief Get Application max connection exponential backoff failure count
 @return max connection exponential backoff failure count
 */
- (jint)getMaxFailureCount;

/*!
 @brief Get Application min connection exponential backoff delay
 @return min connection exponential backoff delay
 */
- (jint)getMinDelay;

/*!
 @brief Get Notification provider
 @return notification provider
 */
- (id<ACNotificationProvider>)getNotificationProvider;

/*!
 @brief Get PhoneBook provider
 @return PhoneBook provider
 */
- (id<ACPhoneBookProvider>)getPhoneBookProvider;

/*!
 @brief Get Platform Type
 @return App Type
 */
- (ACPlatformType *)getPlatformType;

/*!
 @brief Get preferred languages
 @return preferred languages
 */
- (IOSObjectArray *)getPreferredLanguages;

/*!
 @brief Get device time zone
 @return device timezone in Tz-format
 */
- (NSString *)getTimeZone;

/*!
 @brief Getting Trusted keys
 @return trusted keys if set
 */
- (IOSObjectArray *)getTrustedKeys;

/*!
 @brief Get Enable contacts logging flag
 @return is enable contacts logging
 */
- (jboolean)isEnableContactsLogging;

/*!
 @brief Get If Grouped Chat List enabled
 @return is grouped chat list enabled
 */
- (jboolean)isEnabledGroupedChatList;

/*!
 @brief Get Enable files logging flag
 @return is enable files logging
 */
- (jboolean)isEnableFilesLogging;

/*!
 @brief Get Enable network logging flag
 @return is enable network logging
 */
- (jboolean)isEnableNetworkLogging;

/*!
 @brief Getting if app automatically imports phone book to server
 @return if phone book enabled
 */
- (jboolean)isEnablePhoneBookImport;

/*!
 @brief Getting If Voice Calls Enabled
 @return voice calls enabled
 */
- (jboolean)isVoiceCallsEnabled;

#pragma mark Package-Private

- (instancetype)initWithARConnectionEndpointArray:(IOSObjectArray *)endpoints
                          withACPhoneBookProvider:(id<ACPhoneBookProvider>)phoneBookProvider
                       withACNotificationProvider:(id<ACNotificationProvider>)notificationProvider
                           withACApiConfiguration:(ACApiConfiguration *)apiConfiguration
                                      withBoolean:(jboolean)enableContactsLogging
                                      withBoolean:(jboolean)enableNetworkLogging
                                      withBoolean:(jboolean)enableFilesLogging
                             withACDeviceCategory:(ACDeviceCategory *)deviceCategory
                               withACPlatformType:(ACPlatformType *)platformType
                                          withInt:(jint)minDelay
                                          withInt:(jint)maxDelay
                                          withInt:(jint)maxFailureCount
                                     withNSString:(NSString *)timeZone
                                withNSStringArray:(IOSObjectArray *)preferredLanguages
                                     withNSString:(NSString *)customAppName
                            withACTrustedKeyArray:(IOSObjectArray *)trustedKeys
                                      withBoolean:(jboolean)enablePhoneBookImport
                              withACCallsProvider:(id<ACCallsProvider>)callsProvider
                                      withBoolean:(jboolean)voiceCallsEnabled
                                      withBoolean:(jboolean)isEnabledGroupedChatList;

@end

J2OBJC_EMPTY_STATIC_INIT(ACConfiguration)

FOUNDATION_EXPORT void ACConfiguration_initWithARConnectionEndpointArray_withACPhoneBookProvider_withACNotificationProvider_withACApiConfiguration_withBoolean_withBoolean_withBoolean_withACDeviceCategory_withACPlatformType_withInt_withInt_withInt_withNSString_withNSStringArray_withNSString_withACTrustedKeyArray_withBoolean_withACCallsProvider_withBoolean_withBoolean_(ACConfiguration *self, IOSObjectArray *endpoints, id<ACPhoneBookProvider> phoneBookProvider, id<ACNotificationProvider> notificationProvider, ACApiConfiguration *apiConfiguration, jboolean enableContactsLogging, jboolean enableNetworkLogging, jboolean enableFilesLogging, ACDeviceCategory *deviceCategory, ACPlatformType *platformType, jint minDelay, jint maxDelay, jint maxFailureCount, NSString *timeZone, IOSObjectArray *preferredLanguages, NSString *customAppName, IOSObjectArray *trustedKeys, jboolean enablePhoneBookImport, id<ACCallsProvider> callsProvider, jboolean voiceCallsEnabled, jboolean isEnabledGroupedChatList);

FOUNDATION_EXPORT ACConfiguration *new_ACConfiguration_initWithARConnectionEndpointArray_withACPhoneBookProvider_withACNotificationProvider_withACApiConfiguration_withBoolean_withBoolean_withBoolean_withACDeviceCategory_withACPlatformType_withInt_withInt_withInt_withNSString_withNSStringArray_withNSString_withACTrustedKeyArray_withBoolean_withACCallsProvider_withBoolean_withBoolean_(IOSObjectArray *endpoints, id<ACPhoneBookProvider> phoneBookProvider, id<ACNotificationProvider> notificationProvider, ACApiConfiguration *apiConfiguration, jboolean enableContactsLogging, jboolean enableNetworkLogging, jboolean enableFilesLogging, ACDeviceCategory *deviceCategory, ACPlatformType *platformType, jint minDelay, jint maxDelay, jint maxFailureCount, NSString *timeZone, IOSObjectArray *preferredLanguages, NSString *customAppName, IOSObjectArray *trustedKeys, jboolean enablePhoneBookImport, id<ACCallsProvider> callsProvider, jboolean voiceCallsEnabled, jboolean isEnabledGroupedChatList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACConfiguration *create_ACConfiguration_initWithARConnectionEndpointArray_withACPhoneBookProvider_withACNotificationProvider_withACApiConfiguration_withBoolean_withBoolean_withBoolean_withACDeviceCategory_withACPlatformType_withInt_withInt_withInt_withNSString_withNSStringArray_withNSString_withACTrustedKeyArray_withBoolean_withACCallsProvider_withBoolean_withBoolean_(IOSObjectArray *endpoints, id<ACPhoneBookProvider> phoneBookProvider, id<ACNotificationProvider> notificationProvider, ACApiConfiguration *apiConfiguration, jboolean enableContactsLogging, jboolean enableNetworkLogging, jboolean enableFilesLogging, ACDeviceCategory *deviceCategory, ACPlatformType *platformType, jint minDelay, jint maxDelay, jint maxFailureCount, NSString *timeZone, IOSObjectArray *preferredLanguages, NSString *customAppName, IOSObjectArray *trustedKeys, jboolean enablePhoneBookImport, id<ACCallsProvider> callsProvider, jboolean voiceCallsEnabled, jboolean isEnabledGroupedChatList);

J2OBJC_TYPE_LITERAL_HEADER(ACConfiguration)

@compatibility_alias ImDiyalogCoreConfiguration ACConfiguration;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogCoreConfiguration")
