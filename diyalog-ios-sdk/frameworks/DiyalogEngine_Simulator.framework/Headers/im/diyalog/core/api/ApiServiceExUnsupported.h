//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/core/core-shared/src/main/java/im/diyalog/core/api/ApiServiceExUnsupported.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogCoreApiApiServiceExUnsupported")
#ifdef RESTRICT_ImDiyalogCoreApiApiServiceExUnsupported
#define INCLUDE_ALL_ImDiyalogCoreApiApiServiceExUnsupported 0
#else
#define INCLUDE_ALL_ImDiyalogCoreApiApiServiceExUnsupported 1
#endif
#undef RESTRICT_ImDiyalogCoreApiApiServiceExUnsupported

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARApiServiceExUnsupported_) && (INCLUDE_ALL_ImDiyalogCoreApiApiServiceExUnsupported || defined(INCLUDE_ARApiServiceExUnsupported))
#define ARApiServiceExUnsupported_

#define RESTRICT_ImDiyalogCoreApiApiServiceEx 1
#define INCLUDE_ARApiServiceEx 1
#include "../../../../im/diyalog/core/api/ApiServiceEx.h"

@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;

@interface ARApiServiceExUnsupported : ARApiServiceEx

#pragma mark Public

- (instancetype)initWithInt:(jint)key
              withByteArray:(IOSByteArray *)content;

- (jint)getHeader;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

@end

J2OBJC_EMPTY_STATIC_INIT(ARApiServiceExUnsupported)

FOUNDATION_EXPORT void ARApiServiceExUnsupported_initWithInt_withByteArray_(ARApiServiceExUnsupported *self, jint key, IOSByteArray *content);

FOUNDATION_EXPORT ARApiServiceExUnsupported *new_ARApiServiceExUnsupported_initWithInt_withByteArray_(jint key, IOSByteArray *content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARApiServiceExUnsupported *create_ARApiServiceExUnsupported_initWithInt_withByteArray_(jint key, IOSByteArray *content);

J2OBJC_TYPE_LITERAL_HEADER(ARApiServiceExUnsupported)

@compatibility_alias ImDiyalogCoreApiApiServiceExUnsupported ARApiServiceExUnsupported;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogCoreApiApiServiceExUnsupported")
