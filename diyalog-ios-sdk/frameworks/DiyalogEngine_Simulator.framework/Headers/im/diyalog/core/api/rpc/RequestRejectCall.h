//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/core/core-shared/src/main/java/im/diyalog/core/api/rpc/RequestRejectCall.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogCoreApiRpcRequestRejectCall")
#ifdef RESTRICT_ImDiyalogCoreApiRpcRequestRejectCall
#define INCLUDE_ALL_ImDiyalogCoreApiRpcRequestRejectCall 0
#else
#define INCLUDE_ALL_ImDiyalogCoreApiRpcRequestRejectCall 1
#endif
#undef RESTRICT_ImDiyalogCoreApiRpcRequestRejectCall

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARRequestRejectCall_) && (INCLUDE_ALL_ImDiyalogCoreApiRpcRequestRejectCall || defined(INCLUDE_ARRequestRejectCall))
#define ARRequestRejectCall_

#define RESTRICT_ImDiyalogCoreNetworkParserRequest 1
#define INCLUDE_ACRequest 1
#include "../../../../../im/diyalog/core/network/parser/Request.h"

@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;

@interface ARRequestRejectCall : ACRequest

+ (jint)HEADER;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithLong:(jlong)callId;

+ (ARRequestRejectCall *)fromBytesWithByteArray:(IOSByteArray *)data;

- (jlong)getCallId;

- (jint)getHeaderKey;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ARRequestRejectCall)

inline jint ARRequestRejectCall_get_HEADER();
#define ARRequestRejectCall_HEADER 2684
J2OBJC_STATIC_FIELD_CONSTANT(ARRequestRejectCall, HEADER, jint)

FOUNDATION_EXPORT ARRequestRejectCall *ARRequestRejectCall_fromBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void ARRequestRejectCall_initWithLong_(ARRequestRejectCall *self, jlong callId);

FOUNDATION_EXPORT ARRequestRejectCall *new_ARRequestRejectCall_initWithLong_(jlong callId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARRequestRejectCall *create_ARRequestRejectCall_initWithLong_(jlong callId);

FOUNDATION_EXPORT void ARRequestRejectCall_init(ARRequestRejectCall *self);

FOUNDATION_EXPORT ARRequestRejectCall *new_ARRequestRejectCall_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARRequestRejectCall *create_ARRequestRejectCall_init();

J2OBJC_TYPE_LITERAL_HEADER(ARRequestRejectCall)

@compatibility_alias ImDiyalogCoreApiRpcRequestRejectCall ARRequestRejectCall;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogCoreApiRpcRequestRejectCall")
