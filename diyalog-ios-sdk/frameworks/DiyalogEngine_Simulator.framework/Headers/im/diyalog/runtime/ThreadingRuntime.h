//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/runtime/runtime-shared/src/main/java/im/diyalog/runtime/ThreadingRuntime.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogRuntimeThreadingRuntime")
#ifdef RESTRICT_ImDiyalogRuntimeThreadingRuntime
#define INCLUDE_ALL_ImDiyalogRuntimeThreadingRuntime 0
#else
#define INCLUDE_ALL_ImDiyalogRuntimeThreadingRuntime 1
#endif
#undef RESTRICT_ImDiyalogRuntimeThreadingRuntime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARThreadingRuntime_) && (INCLUDE_ALL_ImDiyalogRuntimeThreadingRuntime || defined(INCLUDE_ARThreadingRuntime))
#define ARThreadingRuntime_

@class ARAtomicIntegerCompat;
@class ARAtomicLongCompat;
@class ARThreadLocalCompat;
@class ARThreadPriority;
@class ARWeakReferenceCompat;
@protocol ARDispatcher;
@protocol ARImmediateDispatcher;

/*!
 @brief Provider for multithreading support.
 Contains all required methods for performing asynchronous operations.
 */
@protocol ARThreadingRuntime < NSObject, JavaObject >

/*!
 @brief Time in ms from some fixed point in time and that not relied to local time changes.
 @return time in ms
 */
- (jlong)getActorTime;

/*!
 @brief Current unix-time of system
 @return time in ms
 */
- (jlong)getCurrentTime;

/*!
 @brief Synchronized time by NTP.
 Used for more accurate timing of messages.
 Return value from getCurrentTime() if not supported.
 @return time in ms
 */
- (jlong)getSyncedCurrentTime;

/*!
 @brief Number of computing cores in environment
 @return cores count
 */
- (jint)getCoresCount;

/*!
 @brief Creating compatible AtomicInteger object
 @param value initial value of AtomicInteger
 @return the AtomicInteger
 */
- (ARAtomicIntegerCompat *)createAtomicIntWithInitValue:(jint)value;

/*!
 @brief Creating compatible AtomicLong object
 @param value initial value of AtomicLong
 @return the AtomicLong
 */
- (ARAtomicLongCompat *)createAtomicLongWithInitValue:(jlong)value;

/*!
 @brief Creating compatible ThreadLocal object
 @return the ThreadLocal object
 */
- (ARThreadLocalCompat *)createThreadLocal;

/*!
 @brief Creating compatible weak reference
 @param val value for reference
 @return weak reference
 */
- (ARWeakReferenceCompat *)createWeakReference:(id)val;

/*!
 @brief Creating Dispatcher for very lightweight tasks
 @return the Dispatcher object
 */
- (id<ARDispatcher>)createDispatcherWithName:(NSString *)name;

/*!
 @brief Creating of Actor Dispatcher for dispatching of actor's Envelopes
 @param name     Name of dispatcher
 @param priority priority of dispatcher
 @return created dispatcher
 */
- (id<ARImmediateDispatcher>)createImmediateDispatcherWithName:(NSString *)name
                                                  withPriority:(ARThreadPriority *)priority;

@end

J2OBJC_EMPTY_STATIC_INIT(ARThreadingRuntime)

J2OBJC_TYPE_LITERAL_HEADER(ARThreadingRuntime)

#define ImDiyalogRuntimeThreadingRuntime ARThreadingRuntime

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogRuntimeThreadingRuntime")
