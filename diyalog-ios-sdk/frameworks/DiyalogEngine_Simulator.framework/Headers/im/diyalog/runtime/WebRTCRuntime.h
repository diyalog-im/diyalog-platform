//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/runtime/runtime-shared/src/main/java/im/diyalog/runtime/WebRTCRuntime.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogRuntimeWebRTCRuntime")
#ifdef RESTRICT_ImDiyalogRuntimeWebRTCRuntime
#define INCLUDE_ALL_ImDiyalogRuntimeWebRTCRuntime 0
#else
#define INCLUDE_ALL_ImDiyalogRuntimeWebRTCRuntime 1
#endif
#undef RESTRICT_ImDiyalogRuntimeWebRTCRuntime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARWebRTCRuntime_) && (INCLUDE_ALL_ImDiyalogRuntimeWebRTCRuntime || defined(INCLUDE_ARWebRTCRuntime))
#define ARWebRTCRuntime_

@class ARPromise;
@class ARWebRTCSettings;
@class IOSObjectArray;

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

/*!
 @brief Web RTC support runtime
 */
@protocol ARWebRTCRuntime < NSObject, JavaObject >

/*!
 @brief Creating of WebRTC peer connection
 @param webRTCIceServers servers for peer connection
 @param settings         settings for peer connection
 @return promise of peer connection
 */
- (ARPromise * __nonnull)createPeerConnectionWithServers:(IOSObjectArray *)webRTCIceServers
                                            withSettings:(ARWebRTCSettings *)settings;

/*!
 @brief Getting User Audio stream
 @return promise of audio stream
 */
- (ARPromise * __nonnull)getUserAudio;

/*!
 @brief Return if implementation supports pre-connection technique
 @return true if preconnections are supported
 */
- (jboolean)supportsPreConnections;

@end

J2OBJC_EMPTY_STATIC_INIT(ARWebRTCRuntime)

J2OBJC_TYPE_LITERAL_HEADER(ARWebRTCRuntime)

#define ImDiyalogRuntimeWebRTCRuntime ARWebRTCRuntime

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogRuntimeWebRTCRuntime")
