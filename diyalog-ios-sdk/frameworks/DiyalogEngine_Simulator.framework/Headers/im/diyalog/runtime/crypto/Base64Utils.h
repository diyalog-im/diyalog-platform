//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/runtime/runtime-shared/src/main/java/im/diyalog/runtime/crypto/Base64Utils.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogRuntimeCryptoBase64Utils")
#ifdef RESTRICT_ImDiyalogRuntimeCryptoBase64Utils
#define INCLUDE_ALL_ImDiyalogRuntimeCryptoBase64Utils 0
#else
#define INCLUDE_ALL_ImDiyalogRuntimeCryptoBase64Utils 1
#endif
#undef RESTRICT_ImDiyalogRuntimeCryptoBase64Utils

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARBase64Utils_) && (INCLUDE_ALL_ImDiyalogRuntimeCryptoBase64Utils || defined(INCLUDE_ARBase64Utils))
#define ARBase64Utils_

@class IOSByteArray;

/*!
 @brief A utility to decode and encode byte arrays as Strings, using only "safe"
 characters.
 */
@interface ARBase64Utils : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Decode a base64 string into a byte array.
 @param data the encoded data.
 @return a byte array.
 - seealso: #fromBase64(String)
 */
+ (IOSByteArray *)fromBase64WithNSString:(NSString *)data;

/*!
 @brief Decode a base64 string into a long value.
 */
+ (jlong)longFromBase64WithNSString:(NSString *)value;

/*!
 @brief Converts a byte array into a base 64 encoded string.
 Null is encoded as
 null, and an empty array is encoded as an empty string. Otherwise, the byte
 data is read 3 bytes at a time, with bytes off the end of the array padded
 with zeros. Each 24-bit chunk is encoded as 4 characters from the sequence
 [A-Za-z0-9$_]. If one of the source positions consists entirely of padding
 zeros, an '=' character is used instead.
 @param data a byte array, which may be null or empty
 @return a String
 */
+ (NSString *)toBase64WithByteArray:(IOSByteArray *)data;

/*!
 @brief Return a string containing a base-64 encoded version of the given long
 value.
 Leading groups of all zero bits are omitted.
 */
+ (NSString *)toBase64WithLong:(jlong)value;

@end

J2OBJC_STATIC_INIT(ARBase64Utils)

FOUNDATION_EXPORT IOSByteArray *ARBase64Utils_fromBase64WithNSString_(NSString *data);

FOUNDATION_EXPORT jlong ARBase64Utils_longFromBase64WithNSString_(NSString *value);

FOUNDATION_EXPORT NSString *ARBase64Utils_toBase64WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT NSString *ARBase64Utils_toBase64WithLong_(jlong value);

FOUNDATION_EXPORT void ARBase64Utils_init(ARBase64Utils *self);

FOUNDATION_EXPORT ARBase64Utils *new_ARBase64Utils_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARBase64Utils *create_ARBase64Utils_init();

J2OBJC_TYPE_LITERAL_HEADER(ARBase64Utils)

@compatibility_alias ImDiyalogRuntimeCryptoBase64Utils ARBase64Utils;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogRuntimeCryptoBase64Utils")
