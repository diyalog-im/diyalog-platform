//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/DATA/Diyalog/sdk-core/runtime/runtime-shared/src/main/java/im/diyalog/runtime/json/JSONStringer.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer")
#ifdef RESTRICT_ImDiyalogRuntimeJsonJSONStringer
#define INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer 0
#else
#define INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer 1
#endif
#undef RESTRICT_ImDiyalogRuntimeJsonJSONStringer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARJSONStringer_) && (INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer || defined(INCLUDE_ARJSONStringer))
#define ARJSONStringer_

@class ARJSONStringer_Scope;
@class JavaLangStringBuilder;

/*!
 @brief Implements <code>JSONObject.toString</code> and <code>JSONArray.toString</code>.
 Most
 application developers should use those methods directly and disregard this
 API. For example:
@code

  JSONObject object = ...
  
@endcode
 <p/>
 <p>Stringers only encode well-formed JSON strings. In particular:
 <ul>
 <li>The stringer must have exactly one top-level array or object.
 <li>Lexical scopes must be balanced: every call to <code>array</code> must
 have a matching call to <code>endArray</code> and every call to <code>object</code>
  must have a matching call to <code>endObject</code>.
 <li>Arrays may not contain keys (property names).
 <li>Objects must alternate keys (property names) and values.
 <li>Values are inserted with either literal <code>value</code>
 calls, or by nesting arrays or objects.
 </ul>
 Calls that would result in a malformed JSON string will fail with a
 <code>JSONException</code>.
 <p/>
 <p>This class provides no facility for pretty-printing (ie. indenting)
 output. To encode indented output, use <code>JSONObject.toString(int)</code> or
 <code>JSONArray.toString(int)</code>.
 <p/>
 <p>Some implementations of the API support at most 20 levels of nesting.
 Attempts to create more than 20 levels of nesting may fail with a <code>JSONException</code>
 .
 <p/>
 <p>Each stringer may be used to encode a single top level value. Instances of
 this class are not thread safe. Although this class is nonfinal, it was not
 designed for inheritance and should not be subclassed. In particular,
 self-use by overrideable methods is not specified. See <i>Effective Java</i>
 Item 17, "Design and Document or inheritance or else prohibit it" for further
 information.
 */
@interface ARJSONStringer : NSObject {
 @public
  /*!
   @brief The output data, containing at most one top-level array or object.
   */
  JavaLangStringBuilder *out_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Begins encoding a new array.
 Each call to this method must be paired with
 a call to <code>endArray</code>.
 @return this stringer.
 */
- (ARJSONStringer *)array;

/*!
 @brief Ends encoding the current array.
 @return this stringer.
 */
- (ARJSONStringer *)endArray;

/*!
 @brief Ends encoding the current object.
 @return this stringer.
 */
- (ARJSONStringer *)endObject;

/*!
 @brief Encodes the key (property name) to this stringer.
 @param name the name of the forthcoming value. May not be null.
 @return this stringer.
 */
- (ARJSONStringer *)keyWithNSString:(NSString *)name;

/*!
 @brief Begins encoding a new object.
 Each call to this method must be paired
 with a call to <code>endObject</code>.
 @return this stringer.
 */
- (ARJSONStringer *)object;

/*!
 @brief Returns the encoded JSON string.
 <p/>
 <p>If invoked with unterminated arrays or unclosed objects, this method's
 return value is undefined.
 <p/>
 <p><strong>Warning:</strong> although it contradicts the general contract
 of <code>Object.toString</code>, this method returns null if the stringer
 contains no data.
 */
- (NSString *)description;

/*!
 @brief Encodes <code>value</code> to this stringer.
 @return this stringer.
 */
- (ARJSONStringer *)valueWithBoolean:(jboolean)value;

/*!
 @brief Encodes <code>value</code> to this stringer.
 @param value a finite value. May not be <code>NaNs</code> or
 <code>infinities</code>.
 @return this stringer.
 */
- (ARJSONStringer *)valueWithDouble:(jdouble)value;

/*!
 @brief Encodes <code>value</code> to this stringer.
 @return this stringer.
 */
- (ARJSONStringer *)valueWithLong:(jlong)value;

/*!
 @brief Encodes <code>value</code>.
 @param value a <code>JSONObject</code>, <code>JSONArray</code>, String, Boolean,
 Integer, Long, Double or null. May not be <code>NaNs</code>
 or <code>infinities</code>.
 @return this stringer.
 */
- (ARJSONStringer *)valueWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)indentSpaces;

/*!
 @brief Closes the current scope by appending any necessary whitespace and the
 given bracket.
 */
- (ARJSONStringer *)closeWithARJSONStringer_Scope:(ARJSONStringer_Scope *)empty
                         withARJSONStringer_Scope:(ARJSONStringer_Scope *)nonempty
                                     withNSString:(NSString *)closeBracket;

/*!
 @brief Enters a new scope by appending any necessary whitespace and the given
 bracket.
 */
- (ARJSONStringer *)openWithARJSONStringer_Scope:(ARJSONStringer_Scope *)empty
                                    withNSString:(NSString *)openBracket;

@end

J2OBJC_STATIC_INIT(ARJSONStringer)

J2OBJC_FIELD_SETTER(ARJSONStringer, out_, JavaLangStringBuilder *)

FOUNDATION_EXPORT void ARJSONStringer_init(ARJSONStringer *self);

FOUNDATION_EXPORT ARJSONStringer *new_ARJSONStringer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARJSONStringer *create_ARJSONStringer_init();

FOUNDATION_EXPORT void ARJSONStringer_initWithInt_(ARJSONStringer *self, jint indentSpaces);

FOUNDATION_EXPORT ARJSONStringer *new_ARJSONStringer_initWithInt_(jint indentSpaces) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARJSONStringer *create_ARJSONStringer_initWithInt_(jint indentSpaces);

J2OBJC_TYPE_LITERAL_HEADER(ARJSONStringer)

@compatibility_alias ImDiyalogRuntimeJsonJSONStringer ARJSONStringer;

#endif

#if !defined (ARJSONStringer_Scope_) && (INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer || defined(INCLUDE_ARJSONStringer_Scope))
#define ARJSONStringer_Scope_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
@import j2objc;

typedef NS_ENUM(NSUInteger, ARJSONStringer_Scope_Enum) {
  ARJSONStringer_Scope_Enum_EMPTY_ARRAY = 0,
  ARJSONStringer_Scope_Enum_NONEMPTY_ARRAY = 1,
  ARJSONStringer_Scope_Enum_EMPTY_OBJECT = 2,
  ARJSONStringer_Scope_Enum_DANGLING_KEY = 3,
  ARJSONStringer_Scope_Enum_NONEMPTY_OBJECT = 4,
  ARJSONStringer_Scope_Enum_NULL = 5,
};

/*!
 @brief Lexical scoping elements within this stringer, necessary to insert the
 appropriate separator characters (ie. commas and colons) and to detect
 nesting errors.
 */
@interface ARJSONStringer_Scope : JavaLangEnum < NSCopying >

+ (ARJSONStringer_Scope *)EMPTY_ARRAY;

+ (ARJSONStringer_Scope *)NONEMPTY_ARRAY;

+ (ARJSONStringer_Scope *)EMPTY_OBJECT;

+ (ARJSONStringer_Scope *)DANGLING_KEY;

+ (ARJSONStringer_Scope *)NONEMPTY_OBJECT;

+ (ARJSONStringer_Scope *)NULL_;

#pragma mark Package-Private

+ (IOSObjectArray *)values;

+ (ARJSONStringer_Scope *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;
- (ARJSONStringer_Scope_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ARJSONStringer_Scope)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ARJSONStringer_Scope *ARJSONStringer_Scope_values_[];

/*!
 @brief An array with no elements requires no separators or newlines before
 it is closed.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_EMPTY_ARRAY();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, EMPTY_ARRAY)

/*!
 @brief A array with at least one value requires a comma and newline before
 the next element.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_NONEMPTY_ARRAY();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, NONEMPTY_ARRAY)

/*!
 @brief An object with no keys or values requires no separators or newlines
 before it is closed.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_EMPTY_OBJECT();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, EMPTY_OBJECT)

/*!
 @brief An object whose most recent element is a key.
 The next element must
 be a value.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_DANGLING_KEY();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, DANGLING_KEY)

/*!
 @brief An object with at least one name/value pair requires a comma and
 newline before the next element.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_NONEMPTY_OBJECT();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, NONEMPTY_OBJECT)

/*!
 @brief A special bracketless array needed by JSONStringer.join() and
 JSONObject.quote() only.
 Not used for JSON encoding.
 */
inline ARJSONStringer_Scope *ARJSONStringer_Scope_get_NULL();
J2OBJC_ENUM_CONSTANT(ARJSONStringer_Scope, NULL)

FOUNDATION_EXPORT IOSObjectArray *ARJSONStringer_Scope_values();

FOUNDATION_EXPORT ARJSONStringer_Scope *ARJSONStringer_Scope_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ARJSONStringer_Scope *ARJSONStringer_Scope_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ARJSONStringer_Scope)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImDiyalogRuntimeJsonJSONStringer")
